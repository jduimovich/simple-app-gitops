# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# 💁 The Gitops Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Send a pull request to this repo to update the deployment yaml

name: Build-Gitops-Workflow 
env:
  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: quay.io/jduimovich0
  IMAGE_REGISTRY_USER: jduimovich0
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: ""
  # 🖊️ EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "" 
on: 
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:
  openshift-ci-cd:
    name: Build and send Image Update PR
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-18.04
    environment: production

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = { 
            IMAGE_REGISTRY_PASSWORD: `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`,
          }; 
          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });
          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '2' 
    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV
    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
        echo "IMAGE_TAG=${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
    - name: Compute Changed Files
      run: |
        DELTA=changed_directories
        echo "Commit message was: ${{ github.event.commits[0].message }}"
        cat ${{ github.event.commits[0].message }}  > $DELTA
        if grep "/push" $DELTA
        then 
            echo "Push Selected" 
            export PUSH_NO_PR=true 
        else 
            export PUSH_NO_PR=false 
            echo "Changes will be sent via PR." 
        fi  
        git diff --name-only HEAD HEAD~1 > $DELTA 
        if grep -v "deploy/" $DELTA
        then 
            echo "Rebuild-required." 
            export ONLY_DEPLOY_CHANGES=false 
        else
            export ONLY_DEPLOY_CHANGES=true 
            echo "Only files in deployment changed, no rebuild-required." 
        fi 
        echo Files Changed
        cat $DELTA 
        rm -rf $DELTA 
        echo "ONLY_DEPLOY_CHANGES=${ONLY_DEPLOY_CHANGES}" | tee -a $GITHUB_ENV   
    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}

        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./Dockerfile
    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    - name: Install  yq
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      run: |
        ls -al 
        export VERSION=v4.2.0  
        export BINARY=yq_linux_amd64
        wget -q https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O ./yq
        chmod +x ./yq
    - name: Patch Deployment YAML with new image references
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      run: | 
        ./yq  e '.spec.template.spec.containers[0].image = "${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"' deploy/deployment.yaml -i
        echo "Image is Set to:"
        ./yq  e '.spec.template.spec.containers[0].image' deploy/deployment.yaml
    - name: Cleanup
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      run: |
        rm -rf ./yq
        rm -rf  kubeconfig.yaml
        rm -rf  *digest.txt
        rm -rf  tmp_*
    - name: Create Pull Request to update changes in repo
      if: env.ONLY_DEPLOY_CHANGES == 'false'
      uses: peter-evans/create-pull-request@v3
      with:
        title: 'Deploy with tag ${{ env.IMAGE_TAG }} for commit ${{ github.event.head_commit.message }}'
        commit-message: 'New deployment images with tag ${{ env.IMAGE_TAG }}'
